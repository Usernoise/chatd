import asyncio
import json
import logging
import os
import tempfile
import requests
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, InlineQueryHandler, filters, ContextTypes, JobQueue
from datetime import datetime, timedelta, time
import pytz
import re
import uuid
from director_analyzer import analyze_director_and_gift, format_gift_message
from song_generator import (
    analyze_chat_and_generate_song,
    generate_music_with_suno,
    check_suno_task_status,
    wait_for_suno_completion,
    format_song_message,
    create_song_from_user_request,
)
from director_photo_generator import generate_director_photo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
try:
    from prompts import SUMMARY_PROMPT, TOP_SUMMARY_PROMPT, CHATGPT_PROMPT, RECENT_SUMMARY_PROMPT
    logger.info("–ü—Ä–æ–º–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError:
    # Fallback –ø—Ä–æ–º–ø—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    SUMMARY_PROMPT = "–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—à—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É."
    TOP_SUMMARY_PROMPT = "–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∏ –≤—ã–±–∏—Ä–∞–µ—à—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    CHATGPT_PROMPT = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
    RECENT_SUMMARY_PROMPT = "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –ø—Ä–æ–º–ø—Ç—ã")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
try:
    from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, MOSCOW_TIMEZONE, MESSAGE_STORE_FILE, AUTO_RESPONSE_INTERVAL
    bot_token = TELEGRAM_BOT_TOKEN
    openai_api_key = OPENAI_API_KEY
    moscow_tz = pytz.timezone(MOSCOW_TIMEZONE)
    logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –∏–∑ config.py")
except ImportError:
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '')
    openai_api_key = os.getenv('OPENAI_API_KEY', '')
    moscow_tz = pytz.timezone('Europe/Moscow')
    MESSAGE_STORE_FILE = "message_store.json"
    AUTO_RESPONSE_INTERVAL = 20  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç–∞
if openai_api_key:
    openai_client = OpenAI(api_key=openai_api_key)
else:
    openai_client = None
    logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
try:
    from director_photo_generator import generate_director_photo
    PHOTO_GENERATOR_AVAILABLE = True
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    PHOTO_GENERATOR_AVAILABLE = False
    logger.warning(f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –ø–æ –ø—Ä–æ–º–ø—Ç—É
try:
    from photo_generator_api import generate_photo
    PHOTO_GENERATOR_API_AVAILABLE = True
    logger.info("API –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    PHOTO_GENERATOR_API_AVAILABLE = False
    logger.warning(f"API –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
try:
    from director_analyzer import analyze_director_and_gift, format_gift_message
    DIRECTOR_ANALYZER_AVAILABLE = True
    logger.info("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    DIRECTOR_ANALYZER_AVAILABLE = False
    logger.warning(f"–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Å–µ–Ω
try:
    from song_generator import analyze_chat_and_generate_song, format_song_message, generate_music_with_suno
    SONG_GENERATOR_AVAILABLE = True
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Å–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    SONG_GENERATOR_AVAILABLE = False
    logger.warning(f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Å–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

message_store = {}
chat_threads = {}

# –°—á–µ—Ç—á–∏–∫ –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
save_counter = 0
SAVE_BATCH_SIZE = 10

# –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
message_counters = {}

def load_messages_from_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if os.path.exists(MESSAGE_STORE_FILE):
        try:
            with open(MESSAGE_STORE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            for chat_id, messages in data.items():
                for message in messages.values():
                    message['timestamp'] = datetime.fromisoformat(message['timestamp'])
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(data)} —á–∞—Ç–æ–≤")
            return data
        except (json.JSONDecodeError, KeyError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            backup_name = f"{MESSAGE_STORE_FILE}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.rename(MESSAGE_STORE_FILE, backup_name)
            logger.info(f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {backup_name}")
            return {}
    else:
        logger.info("–§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ.")
        return {}

def reset_message_counters():
    """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    global message_counters
    message_counters = {}
    logger.info("–°—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã")

def save_messages_to_file(force=False):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª —Å –±–∞—Ç—á–∏–Ω–≥–æ–º"""
    global save_counter
    save_counter += 1
    
    if not force and save_counter < SAVE_BATCH_SIZE:
        return
        
    save_counter = 0
    
    try:
        serializable_data = {
            chat_id: {
                msg_id: {**msg, 'timestamp': msg['timestamp'].isoformat()}
                for msg_id, msg in chat_messages.items()
            }
            for chat_id, chat_messages in message_store.items()
        }
        
        # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = f"{MESSAGE_STORE_FILE}.tmp"
        with open(temp_file, "w", encoding="utf-8") as f:
            json.dump(serializable_data, f, ensure_ascii=False, indent=2)
        
        os.replace(temp_file, MESSAGE_STORE_FILE)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
        if os.path.exists(f"{MESSAGE_STORE_FILE}.tmp"):
            os.remove(f"{MESSAGE_STORE_FILE}.tmp")

def cleanup_chat_threads():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–¥–æ–≤ —á–∞—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
    for chat_id in list(chat_threads.keys()):
        if len(chat_threads[chat_id]) > 20:  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            chat_threads[chat_id] = chat_threads[chat_id][:1] + chat_threads[chat_id][-10:]
            logger.info(f"–û—á–∏—â–µ–Ω —Ç—Ä–µ–¥ —á–∞—Ç–∞ {chat_id}")

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
         ["üìã –ò—Ç–æ–≥–∏", "üèÜ –¢–æ–ø –¥–Ω—è", "üìÖ –¢–æ–ø 7–¥"],
        ["ü§î –ß–µ —É –≤–∞—Å —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"],
         ["üéÅ –ü–æ–¥–∞—Ä–æ–∫", "üéµ –ü–µ—Å–Ω—è –¥–Ω—è", "üé∂ –ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

message_store = load_messages_from_file()

def get_current_time():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ"""
    return datetime.now(moscow_tz)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = get_main_keyboard()
    
    await update.message.reply_text(
        '–ê–õ–û!!!!!! –Ø –±–æ—Ç  –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤.\n\n'
        'üéØ **–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏:**\n'
        'üìã –ò—Ç–æ–≥–∏ - —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n'
        'üèÜ –¢–æ–ø –¥–Ω—è - —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n'
        'üìÖ –¢–æ–ø 7–¥ - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–µ–ª–∏\n'
        'ü§î –ß–µ —É –≤–∞—Å —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç - —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞\n'
        'üéÅ –ü–æ–¥–∞—Ä–æ–∫ - –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —á–∞—Ç–∞\n'
        'üéµ –ü–µ—Å–Ω—è –¥–Ω—è - –ø–µ—Å–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞\n\n'
        '‚å®Ô∏è **–ö–æ–º–∞–Ω–¥—ã:**\n'
        '/sum - –∏—Ç–æ–≥–∏ –¥–Ω—è\n'
        '/top - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–Ω—è\n'
        '/week - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–µ–ª–∏\n'
        '/date YYYY-MM-DD - –∏—Ç–æ–≥–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n'
        '/topdate YYYY-MM-DD - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –¥–∞—Ç—É\n'
        '/q <—Ç–µ–∫—Å—Ç> - –≤–æ–ø—Ä–æ—Å ChatGPT\n'
        '/photo <–ø—Ä–æ–º–ø—Ç> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ\n'
        '/debug - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ\n\n'
        'üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n'
        '/date 2024-07-20\n'
        '/topdate 2024-07-20\n'
        '/photo cute cat sitting on a chair\n\n'
        'üîç **Inline —Ä–µ–∂–∏–º:**\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @aisumbot day, week –∏–ª–∏ /photo –ø—Ä–æ–º–ø—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ.',
        parse_mode='Markdown',
        reply_markup=keyboard
    )

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.inline_query.query.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /photo
    if query.startswith('/photo '):
        if not PHOTO_GENERATOR_API_AVAILABLE:
            await update.inline_query.answer([
                InlineQueryResultArticle(
                    id='error',
                    title='–û—à–∏–±–∫–∞',
                    input_message_content=InputTextMessageContent(
                        "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    )
                )
            ], cache_time=0)
            return
        
        prompt = query[7:].strip()  # –£–±–∏—Ä–∞–µ–º '/photo '
        if not prompt:
            await update.inline_query.answer([
                InlineQueryResultArticle(
                    id='help',
                    title='–ü–æ–º–æ—â—å',
                    input_message_content=InputTextMessageContent(
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /photo –≤–∞—à –ø—Ä–æ–º–ø—Ç\n\n–ü—Ä–∏–º–µ—Ä: /photo cute cat"
                    )
                )
            ], cache_time=300)
            return
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import asyncio
            loop = asyncio.get_event_loop()
            photo_path = await loop.run_in_executor(None, generate_photo, prompt)
            
            if photo_path and os.path.exists(photo_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                with open(photo_path, 'rb') as photo:
                    await update.inline_query.answer([
                        InlineQueryResultArticle(
                            id=str(uuid.uuid4()),
                            title=f'–§–æ—Ç–æ: {prompt[:30]}...',
                            input_message_content=InputTextMessageContent(
                                f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}"
                            )
                        )
                    ], cache_time=0)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(photo_path)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {photo_path}: {e}")
            else:
                await update.inline_query.answer([
                    InlineQueryResultArticle(
                        id='error',
                        title='–û—à–∏–±–∫–∞',
                        input_message_content=InputTextMessageContent(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç."
                        )
                    )
                ], cache_time=0)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
            await update.inline_query.answer([
                InlineQueryResultArticle(
                    id='error',
                    title='–û—à–∏–±–∫–∞',
                    input_message_content=InputTextMessageContent(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                )
            ], cache_time=0)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö inline –∑–∞–ø—Ä–æ—Å–æ–≤
    query_lower = query.lower()
    if query_lower not in ["day", "week"]:
        await update.inline_query.answer([
            InlineQueryResultArticle(
                id='help',
                title='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
                input_message_content=InputTextMessageContent(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: day (–∏—Ç–æ–≥–∏ –¥–Ω—è), week (–∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏) –∏–ª–∏ /photo –ø—Ä–æ–º–ø—Ç (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ)"
                )
            )
        ], cache_time=300)
        return

    try:
        days = 1 if query_lower == "day" else 7
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ inline –∑–∞–ø—Ä–æ—Å–∞
        # –î–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º from_user.id –∫–∞–∫ fallback
        chat_id = update.inline_query.chat_type or str(update.inline_query.from_user.id)
        
        summary = await get_summary(days, chat_id)
        title = '–ò—Ç–æ–≥–∏ –¥–Ω—è' if query_lower == "day" else '–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏'
        unique_id = str(uuid.uuid4())
        
        await update.inline_query.answer([
            InlineQueryResultArticle(
                id=unique_id,
                title=title,
                input_message_content=InputTextMessageContent(summary)
            )
        ], cache_time=0)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ inline query: {e}")
        await update.inline_query.answer([
            InlineQueryResultArticle(
                id='error',
                title='–û—à–∏–±–∫–∞',
                input_message_content=InputTextMessageContent(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            )
        ], cache_time=0)

async def get_summary(days, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if days == 1:
        # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Ç–æ–≥–∏ –¥–Ω—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        messages = get_messages_last_hours(24, chat_id)
        period_text = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        messages = get_messages(days, chat_id)
        period_text = f"{'–¥–µ–Ω—å' if days == 1 else f'{days} –¥–Ω–µ–π'}"
    
    if not messages:
        return f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞ {period_text}."
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": SUMMARY_PROMPT},
                {"role": "user", "content": f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∑–∞ {period_text}:\n\n{messages}"}
            ],
            temperature=0.8,
            max_tokens=2500
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def get_summary_for_date(date_str, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    messages = get_messages_for_date(date_str, chat_id)
    if messages is None:
        return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç  –¥–∞—Ç—ã.  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-07-20)"
    if not messages:
        return f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {date_str}."
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": SUMMARY_PROMPT},
                {"role": "user", "content": f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∑–∞ {date_str}:\n\n{messages}"}
            ],
            temperature=0.8,
            max_tokens=2000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def get_summary_last_hours(hours, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
    messages = get_messages_last_hours(hours, chat_id)
    if not messages:
        return f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤."
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": RECENT_SUMMARY_PROMPT},
                {"role": "user", "content": f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n\n{messages}"}
            ],
            temperature=0.8,
            max_tokens=2000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def get_top_summary(days, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if days == 1:
        # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø –¥–Ω—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        messages = get_messages_last_hours(24, chat_id)
        period_text = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        messages = get_messages(days, chat_id)
        period_text = f"{'–¥–µ–Ω—å' if days == 1 else f'{days} –¥–Ω–µ–π'}"
    
    if not messages:
        return f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {period_text}."
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": TOP_SUMMARY_PROMPT},
                {"role": "user", "content": f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∑–∞ {period_text}:\n\n{messages}"}
            ],
            temperature=0.7,
            max_tokens=2000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ {period_text}."

async def get_top_summary_for_date(date_str, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    messages = get_messages_for_date(date_str, chat_id)
    if messages is None:
        return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-07-20)"
    if not messages:
        return f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {date_str}."
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": TOP_SUMMARY_PROMPT},
                {"role": "user", "content": f"–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∑–∞ {date_str}:\n\n{messages}"}
            ],
            temperature=0.7,
            max_tokens=2000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ {date_str}."

def get_messages(days, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    current_time = get_current_time()
    chat_id = str(chat_id)
    
    if chat_id not in message_store:
        return ""
    
    if days == 1:
        # –î–ª—è –¥–Ω—è –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (00:00) –¥–æ —Å–µ–π—á–∞—Å
        start_time = current_time.replace(hour=0, minute=0, second=0, microsecond=0)
        end_time = current_time
    else:
        # –î–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –±–æ–ª—å—à–µ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–Ω–∏ –Ω–∞–∑–∞–¥
        start_time = current_time - timedelta(days=days)
        end_time = current_time
    
    relevant_messages = [
        f"{msg['sender']}: {msg['text']}"
        for msg in message_store[chat_id].values()
        if start_time <= msg['timestamp'] <= end_time
    ]
    
    return "\n".join(relevant_messages)

def get_messages_for_date(date_str, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)"""
    try:
        target_date = datetime.strptime(date_str, '%Y-%m-%d')
        target_date = moscow_tz.localize(target_date)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç 00:00 –¥–æ 23:59:59 —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        start_time = target_date
        end_time = target_date + timedelta(days=1) - timedelta(seconds=1)
        
        chat_id = str(chat_id)
        
        if chat_id not in message_store:
            return ""
        
        relevant_messages = [
            f"{msg['sender']}: {msg['text']}"
            for msg in message_store[chat_id].values()
            if start_time <= msg['timestamp'] <= end_time
        ]
        
        return "\n".join(relevant_messages)
    except ValueError:
        return None

def get_messages_last_hours(hours, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
    current_time = get_current_time()
    chat_id = str(chat_id)
    
    if chat_id not in message_store:
        return ""
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å N —á–∞—Å–æ–≤
    start_time = current_time - timedelta(hours=hours)
    end_time = current_time
    
    relevant_messages = [
        f"{msg['sender']}: {msg['text']}"
        for msg in message_store[chat_id].values()
        if start_time <= msg['timestamp'] <= end_time
    ]
    
    return "\n".join(relevant_messages)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö"""
    message = update.message
    chat_id = str(message.chat_id)
    
    if message.text and not message.via_bot:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º "–∑–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é"
        if context.user_data.get('custom_song_wait', {}).get(chat_id):
            user_text = message.text.strip()
            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            try:
                context.user_data['custom_song_wait'].pop(chat_id, None)
            except Exception:
                pass

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            await message.reply_text("üéº –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏...")
            try:
                import asyncio
                loop = asyncio.get_event_loop()
                song_data = await loop.run_in_executor(None, create_song_from_user_request, user_text)
                if not song_data:
                    await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                    return

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                song_message = format_song_message(song_data)
                await safe_send_message(update, song_message)

                # –ó–∞–ø—É—Å–∫–∞–µ–º Suno
                await asyncio.sleep(1)
                await update.message.reply_text("üé§ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –≤ Suno...")
                suno_result = await loop.run_in_executor(None, generate_music_with_suno, song_data)
                if suno_result and suno_result.get('task_id'):
                    task_id = suno_result['task_id']
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏
                    if 'song_tasks' not in context.bot_data:
                        context.bot_data['song_tasks'] = {}
                    context.bot_data['song_tasks'][task_id] = {
                        'song_data': song_data,
                        'chat_id': chat_id,
                    }
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É
                    context.job_queue.run_once(
                        check_song_automatically,
                        180,
                        data={'task_id': task_id, 'chat_id': chat_id}
                    )
                    await update.message.reply_text(
                        "‚è≥ –ú—É–∑—ã–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã. –Ø –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Suno.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø–µ—Å–Ω–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if message.text in ["üìã –ò—Ç–æ–≥–∏", "üèÜ –¢–æ–ø –¥–Ω—è", "üìÖ –¢–æ–ø 7–¥", "ü§î –ß–µ —É –≤–∞—Å —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç", "üéÅ –ü–æ–¥–∞—Ä–æ–∫", "üéµ –ü–µ—Å–Ω—è –¥–Ω—è"]:
            await handle_keyboard_buttons(update, context)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "?"
        if message.text.startswith('?'):
            prompt = message.text[1:].strip()
            if prompt:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ChatGPT
                if chat_id not in chat_threads:
                    chat_threads[chat_id] = [{"role": "system", "content": CHATGPT_PROMPT}]

                chat_threads[chat_id].append({"role": "user", "content": prompt})

                try:
                    response = openai_client.chat.completions.create(
                        model="gpt-4.1-mini",
                        messages=chat_threads[chat_id],
                        temperature=0.7,
                        max_tokens=2500
                    )
                    
                    reply = response.choices[0].message.content
                    chat_threads[chat_id].append({"role": "assistant", "content": reply})
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç—Ä–µ–¥–∞
                    if len(chat_threads[chat_id]) > 20:
                        chat_threads[chat_id] = chat_threads[chat_id][:1] + chat_threads[chat_id][-10:]
                        
                    await update.message.reply_text(f"ü§ñ {reply}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ ChatGPT-–∑–∞–ø—Ä–æ—Å–µ: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id not in message_store:
            message_store[chat_id] = {}
            
        message_store[chat_id][str(message.message_id)] = {
            'sender': message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º",
            'text': message.text,
            'timestamp': message.date.replace(tzinfo=pytz.UTC).astimezone(moscow_tz)
        }
        save_messages_to_file()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if chat_id not in message_counters:
            message_counters[chat_id] = 0
        
        message_counters[chat_id] += 1
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–∂–¥–æ–µ N-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ ChatGPT
        if AUTO_RESPONSE_INTERVAL > 0 and message_counters[chat_id] % AUTO_RESPONSE_INTERVAL == 0:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ {message_counters[chat_id]}-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ChatGPT
            if chat_id not in chat_threads:
                chat_threads[chat_id] = [{"role": "system", "content": CHATGPT_PROMPT}]

            chat_threads[chat_id].append({"role": "user", "content": message.text})

            try:
                response = openai_client.chat.completions.create(
                    model="gpt-4.1-mini",
                    messages=chat_threads[chat_id],
                    temperature=0.7,
                    max_tokens=2500
                )
                
                reply = response.choices[0].message.content
                chat_threads[chat_id].append({"role": "assistant", "content": reply})
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç—Ä–µ–¥–∞
                if len(chat_threads[chat_id]) > 20:
                    chat_threads[chat_id] = chat_threads[chat_id][:1] + chat_threads[chat_id][-10:]
                    
                await update.message.reply_text(f"ü§ñ {reply}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º ChatGPT-–∑–∞–ø—Ä–æ—Å–µ: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
    elif message.voice:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        temp_file = None
        try:
            file = await context.bot.get_file(message.voice.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.oga', delete=False) as temp_file:
                temp_file_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(file.file_path, timeout=30)
            response.raise_for_status()
            
            with open(temp_file_path, 'wb') as f:
                f.write(response.content)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            with open(temp_file_path, 'rb') as audio_file:
                transcript = openai_client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            if chat_id not in message_store:
                message_store[chat_id] = {}
                
            message_store[chat_id][str(message.message_id)] = {
                'sender': message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º",
                'text': f"[–ì–æ–ª–æ—Å–æ–≤–æ–µ]: {transcript.text}",
                'timestamp': message.date.replace(tzinfo=pytz.UTC).astimezone(moscow_tz)
            }
            save_messages_to_file()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_file and os.path.exists(temp_file_path):
                try:
                    os.unlink(temp_file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    chat_id = str(update.message.chat_id)
    messages = message_store.get(chat_id, {})
    message_count = len(messages)
    current_time = get_current_time()
    
    oldest = min(messages.values(), key=lambda x: x['timestamp']) if messages else None
    newest = max(messages.values(), key=lambda x: x['timestamp']) if messages else None
    
    debug_info = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</b>\n\n"
    debug_info += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{message_count}</code>\n"
    
    if oldest:
        debug_info += f"–°—Ç–∞—Ä–µ–π—à–µ–µ: <code>{oldest['timestamp'].strftime('%d.%m.%Y %H:%M')}</code>\n"
    if newest:
        debug_info += f"–ù–æ–≤–µ–π—à–µ–µ: <code>{newest['timestamp'].strftime('%d.%m.%Y %H:%M')}</code>\n"
        
    debug_info += f"–°–µ–π—á–∞—Å: <code>{current_time.strftime('%d.%m.%Y %H:%M')}</code>\n"
    debug_info += f"–†–∞–∑–º–µ—Ä chat_threads: <code>{len(chat_threads)}</code>\n"
    debug_info += f"–°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{message_counters.get(chat_id, 0)}</code>\n"
    if AUTO_RESPONSE_INTERVAL > 0:
        next_response = AUTO_RESPONSE_INTERVAL - (message_counters.get(chat_id, 0) % AUTO_RESPONSE_INTERVAL)
        debug_info += f"–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç: <code>{next_response}</code>"
    else:
        debug_info += f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: <code>–æ—Ç–∫–ª—é—á–µ–Ω—ã</code>"
    
    await update.message.reply_text(debug_info, parse_mode='HTML')

async def send_director_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, top_summary_text: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ø–∞ –¥–Ω—è
    """
    if not PHOTO_GENERATOR_AVAILABLE:
        logger.warning("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        import asyncio
        loop = asyncio.get_event_loop()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        photo_path = await loop.run_in_executor(None, generate_director_photo, top_summary_text)
        
        if photo_path and os.path.exists(photo_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            with open(photo_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption="üì∏ <b>–§–û–¢–û –î–ò–†–ï–ö–¢–û–†–ê –ß–ê–¢–ê</b> üì∏",
                    parse_mode='HTML'
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(photo_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {photo_path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {photo_path}: {e}")
                
        else:
            logger.warning("–§–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞: {e}")

async def handle_keyboard_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    text = update.message.text
    chat_id = str(update.message.chat_id)
    
    if text == "üìã –ò—Ç–æ–≥–∏":
        summary = await get_summary(1, chat_id)
        await safe_send_message(update, f"üìã <b>–ò—Ç–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n{summary}")
        
    elif text == "üèÜ –¢–æ–ø –¥–Ω—è":
        top_summary = await get_top_summary(1, chat_id)
        await safe_send_message(update, f"üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n{top_summary}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        await send_director_photo(update, context, top_summary)
        
    elif text == "üìÖ –¢–æ–ø 7–¥":
        top_summary = await get_top_summary(7, chat_id)
        await safe_send_message(update, f"üìÖ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–µ–ª–∏:</b>\n\n{top_summary}")
        
    elif text == "ü§î –ß–µ —É –≤–∞—Å —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç":
        summary = await get_summary_last_hours(2, chat_id)
        await safe_send_message(update, f"ü§î <b>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞:</b>\n\n{summary}")
        
    elif text == "üéÅ –ü–æ–¥–∞—Ä–æ–∫":
        await handle_director_gift(update, context)
        
    elif text == "üéµ –ü–µ—Å–Ω—è –¥–Ω—è":
        await handle_song_generation(update, context)
    
    elif text == "üé∂ –ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é":
        await update.message.reply_text(
            "üé∂ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏. –Ø —Å–æ–∑–¥–∞–º —Ç–µ–∫—Å—Ç –∏ –º—É–∑—ã–∫—É (2-3 –º–∏–Ω—É—Ç—ã).",
            parse_mode='HTML'
        )
        # –ú–∞—Ä–∫–∏—Ä—É–µ–º —á–∞—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏
        if 'custom_song_wait' not in context.user_data:
            context.user_data['custom_song_wait'] = {}
        context.user_data['custom_song_wait'][chat_id] = True

async def handle_director_gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
    if not DIRECTOR_ANALYZER_AVAILABLE:
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    chat_id = str(update.message.chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    status_message = await update.message.reply_text("üéÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞—é –ø–æ–¥–∞—Ä–æ–∫...")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import asyncio
        loop = asyncio.get_event_loop()
        analysis_result = await loop.run_in_executor(None, analyze_director_and_gift, message_store, chat_id)
        
        if analysis_result:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º
            gift_message = format_gift_message(analysis_result)
            await safe_send_message(update, gift_message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ
            if PHOTO_GENERATOR_API_AVAILABLE and analysis_result.get('gift_photo_prompt'):
                try:
                    photo_prompt = analysis_result['gift_photo_prompt']
                    photo_path = await loop.run_in_executor(None, generate_photo, photo_prompt)
                    
                    if photo_path and os.path.exists(photo_path):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞
                        with open(photo_path, 'rb') as photo:
                            await update.message.reply_photo(
                                photo=photo,
                                caption=f"üì∏ <b>–§–û–¢–û –ü–û–î–ê–†–ö–ê –î–õ–Ø: {analysis_result['director_name']}</b> üì∏",
                                parse_mode='HTML'
                            )
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.remove(photo_path)
                            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {photo_path}")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {photo_path}: {e}")
                    else:
                        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞.")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞.")
                    
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —á–∞—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            await status_message.delete()
        except:
            pass

async def handle_song_generation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Å–Ω–∏ –¥–Ω—è"""
    if not SONG_GENERATOR_AVAILABLE:
        await update.message.reply_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Å–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    chat_id = str(update.message.chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await update.message.reply_text("üéµ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∞—Ç –∏ —Å–æ–∑–¥–∞—é –ø–µ—Å–Ω—é...")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç –∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import asyncio
        loop = asyncio.get_event_loop()
        song_data = await loop.run_in_executor(None, analyze_chat_and_generate_song, message_store, chat_id)
        
        if song_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
            song_message = format_song_message(song_data)
            await safe_send_message(update, song_message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É —á–µ—Ä–µ–∑ Suno API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if song_data.get('lyrics'):
                try:
                    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –º—É–∑—ã–∫–∏
                    await update.message.reply_text("üéº –Ø —É–∂–µ —É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã...")
                    
                    suno_result = await loop.run_in_executor(None, generate_music_with_suno, song_data)
                    
                    if suno_result and suno_result.get('task_id'):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        if 'song_tasks' not in context.bot_data:
                            context.bot_data['song_tasks'] = {}
                        
                        task_id = suno_result['task_id']
                        context.bot_data['song_tasks'][task_id] = {
                            'song_data': song_data,
                            'chat_id': chat_id
                        }
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
                        context.job_queue.run_once(
                            check_song_automatically,
                            180,  # 3 –º–∏–Ω—É—Ç—ã
                            data={'task_id': task_id, 'chat_id': chat_id}
                        )
                        

                    else:
                        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫—É —á–µ—Ä–µ–∑ Suno API.")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏.")
                    
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Å–Ω–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            await status_message.delete()
        except:
            pass

async def check_song_automatically(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã"""
    job_data = context.job.data
    task_id = job_data['task_id']
    chat_id = job_data['chat_id']
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        from song_generator import check_suno_task_status
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_result = check_suno_task_status(task_id)
        
        if status_result:
            status = status_result.get('status', 'unknown')
            
            if status == 'SUCCESS':
                # –ú—É–∑—ã–∫–∞ –≥–æ—Ç–æ–≤–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
                song_info = context.bot_data.get('song_tasks', {}).get(task_id, {}).get('song_data', {})
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º—É–∑—ã–∫–µ –∏–∑ response
                response_data = status_result.get('response', {})
                suno_data = response_data.get('sunoData', [])
                
                if suno_data:
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é: {song_info.get('song_title', '–ü–µ—Å–Ω—è –¥–Ω—è')} - {len(suno_data)} —Ç—Ä–µ–∫–æ–≤")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ —Å –∞—É–¥–∏–æ –∏ –æ–±–ª–æ–∂–∫–æ–π
                    for i, track in enumerate(suno_data, 1):
                        try:
                            audio_url = track.get('audioUrl')
                            image_url = track.get('imageUrl')
                            
                            if audio_url and image_url:
                                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏ –æ–±–ª–æ–∂–∫—É
                                audio_response = requests.get(audio_url, timeout=30)
                                image_response = requests.get(image_url, timeout=30)
                                
                                if audio_response.status_code == 200 and image_response.status_code == 200:
                                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                                    with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as audio_file:
                                        audio_file.write(audio_response.content)
                                        audio_path = audio_file.name
                                    
                                    with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as image_file:
                                        image_file.write(image_response.content)
                                        image_path = image_file.name
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –æ–±–ª–æ–∂–∫–æ–π
                                    current_date = datetime.now().strftime("%d.%m.%y")
                                    
                                    with open(audio_path, 'rb') as audio, open(image_path, 'rb') as image:
                                        await context.bot.send_audio(
                                            chat_id=int(chat_id),
                                            audio=audio,
                                            thumbnail=image,
                                            title=f"{song_info.get('song_title', '–ü–µ—Å–Ω—è –¥–Ω—è')} - –¢—Ä–µ–∫ {i}",
                                            performer=current_date,
                                            caption=f"üéµ <b>–¢—Ä–µ–∫ {i}</b>",
                                            parse_mode='HTML'
                                        )
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                                    os.unlink(audio_path)
                                    os.unlink(image_path)
                                    
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
                                    fallback_message = f"üéµ <b>–¢—Ä–µ–∫ {i}</b>\n"
                                    fallback_message += f"–ê—É–¥–∏–æ: {audio_url}\n"
                                    fallback_message += f"–û–±–ª–æ–∂–∫–∞: {image_url}"
                                    
                                    await context.bot.send_message(
                                        chat_id=int(chat_id),
                                        text=fallback_message,
                                        parse_mode='HTML'
                                    )
                                    
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {i}: {e}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
                            fallback_message = f"üéµ <b>–¢—Ä–µ–∫ {i}</b>\n"
                            fallback_message += f"–ê—É–¥–∏–æ: {track.get('audioUrl', 'N/A')}\n"
                            fallback_message += f"–û–±–ª–æ–∂–∫–∞: {track.get('imageUrl', 'N/A')}"
                            
                            await context.bot.send_message(
                                chat_id=int(chat_id),
                                text=fallback_message,
                                parse_mode='HTML'
                            )
                else:
                    await context.bot.send_message(
                        chat_id=int(chat_id),
                        text=f"üéµ <b>–ú—É–∑—ã–∫–∞ –≥–æ—Ç–æ–≤–∞!</b> üéµ\n\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{song_info.get('song_title', '–ü–µ—Å–Ω—è –¥–Ω—è')}</b>\n"
                             f"–ñ–∞–Ω—Ä: <b>{song_info.get('genre', 'Pop')}</b>\n"
                             f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: <b>{song_info.get('mood', 'Happy')}</b>\n\n"
                             f"–ù–æ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        parse_mode='HTML'
                    )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
                if 'song_tasks' in context.bot_data and task_id in context.bot_data['song_tasks']:
                    del context.bot_data['song_tasks'][task_id]
                    
            elif status in ['CREATE_TASK_FAILED', 'GENERATE_AUDIO_FAILED', 'CALLBACK_EXCEPTION', 'SENSITIVE_WORD_ERROR']:
                await context.bot.send_message(
                    chat_id=int(chat_id),
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏</b>\n\n"
                         f"–°—Ç–∞—Ç—É—Å: {status}\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é –∑–∞–Ω–æ–≤–æ.",
                    parse_mode='HTML'
                )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
                if 'song_tasks' in context.bot_data and task_id in context.bot_data['song_tasks']:
                    del context.bot_data['song_tasks'][task_id]
                    
            else:
                # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—â–µ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                context.job_queue.run_once(
                    check_song_automatically, 
                    30,  # 30 —Å–µ–∫—É–Ω–¥
                    data={'task_id': task_id, 'chat_id': chat_id}
                )
                
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            context.job_queue.run_once(
                check_song_automatically, 
                60,  # 1 –º–∏–Ω—É—Ç–∞
                data={'task_id': task_id, 'chat_id': chat_id}
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Å–Ω–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        context.job_queue.run_once(
            check_song_automatically, 
            120,  # 2 –º–∏–Ω—É—Ç—ã
            data={'task_id': task_id, 'chat_id': chat_id}
        )

async def send_daily_reports(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    logger.info("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
    
    for chat_id in list(message_store.keys()):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å
            messages_today = get_messages(1, chat_id)
            if not messages_today.strip():
                continue
                
            top_summary = await get_top_summary(1, chat_id)
            
            await context.bot.send_message(
                chat_id=int(chat_id), 
                text=f"üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n{top_summary}",
                parse_mode='HTML'
            )
            

            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
            if DIRECTOR_ANALYZER_AVAILABLE:
                try:
                    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
                    analysis_result = await loop.run_in_executor(None, analyze_director_and_gift, message_store, chat_id)
                    
                    if analysis_result:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
                        gift_message = format_gift_message(analysis_result)
                        await context.bot.send_message(
                            chat_id=int(chat_id),
                            text=gift_message,
                            parse_mode='HTML'
                        )
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ
                        if PHOTO_GENERATOR_API_AVAILABLE and analysis_result.get('gift_photo_prompt'):
                            try:
                                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ñ–æ—Ç–æ
                                photo_prompt = analysis_result['gift_photo_prompt']
                                photo_path = await loop.run_in_executor(None, generate_photo, photo_prompt)
                                
                                if photo_path and os.path.exists(photo_path):
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞
                                    with open(photo_path, 'rb') as photo:
                                        await context.bot.send_photo(
                                            chat_id=int(chat_id),
                                            photo=photo,
                                            caption=f"üì∏ <b>–§–û–¢–û –ü–û–î–ê–†–ö–ê –î–õ–Ø: {analysis_result['director_name']}</b> üì∏",
                                            parse_mode='HTML'
                                        )
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    try:
                                        os.remove(photo_path)
                                    except Exception as e:
                                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                                        
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ—Ç—á–µ—Ç–µ: {e}")
                                
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ—Ç—á–µ—Ç–µ: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç {chat_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    cleanup_chat_threads()

async def manual_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /sum –¥–ª—è —Ä—É—á–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    chat_id = str(update.message.chat_id)
    summary = await get_summary(1, chat_id)
    await safe_send_message(update, f"üìã <b>–ò—Ç–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n{summary}")

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /top –¥–ª—è —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–Ω—è"""
    chat_id = str(update.message.chat_id)
    top_summary = await get_top_summary(1, chat_id)
    await safe_send_message(update, f"üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n{top_summary}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    await send_director_photo(update, context, top_summary)

async def week_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /week –¥–ª—è —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–µ–ª–∏"""
    chat_id = str(update.message.chat_id)
    top_summary = await get_top_summary(7, chat_id)
    await safe_send_message(update, f"üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–µ–ª–∏:</b>\n\n{top_summary}")

async def safe_send_message(update, text, parse_mode='HTML'):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if '**' in text and parse_mode == 'HTML':
            # –ó–∞–º–µ–Ω—è–µ–º **—Ç–µ–∫—Å—Ç** –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
            import re
            text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        
        await update.message.reply_text(text, parse_mode=parse_mode)
    except Exception as e:
        if "parse entities" in str(e).lower() or "can't parse" in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            import re
            clean_text = re.sub(r'<[^>]+>', '', text)
            clean_text = re.sub(r'\*\*(.*?)\*\*', r'\1', clean_text)
            await update.message.reply_text(clean_text)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def date_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /date –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    if not context.args:
        await update.message.reply_text(
            "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/date 2024-07-20</code>",
            parse_mode='HTML'
        )
        return
    
    date_str = context.args[0]
    chat_id = str(update.message.chat_id)
    
    summary = await get_summary_for_date(date_str, chat_id)
    await safe_send_message(update, f"üìã <b>–ò—Ç–æ–≥–∏ –∑–∞ {date_str}:</b>\n\n{summary}")

async def topdate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /topdate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    if not context.args:
        await update.message.reply_text(
            "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/topdate 2024-07-20</code>",
            parse_mode='HTML'
        )
        return
    
    date_str = context.args[0]
    chat_id = str(update.message.chat_id)
    
    top_summary = await get_top_summary_for_date(date_str, chat_id)
    await safe_send_message(update, f"üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ {date_str}:</b>\n\n{top_summary}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    await send_director_photo(update, context, top_summary)

async def chatgpt_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /q –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT"""
    chat_id = str(update.message.chat_id)
    prompt = update.message.text[2:].strip()  # —É–±–∏—Ä–∞–µ–º /q
    
    if not prompt:
        await update.message.reply_text("‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /q\n\n–ü—Ä–∏–º–µ—Ä: <code>/q –ö–∞–∫ –¥–µ–ª–∞?</code>", parse_mode='HTML')
        return

    if chat_id not in chat_threads:
        chat_threads[chat_id] = [{"role": "system", "content": CHATGPT_PROMPT}]

    chat_threads[chat_id].append({"role": "user", "content": prompt})

    try:
        response = openai_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=chat_threads[chat_id],
            temperature=0.7,
            max_tokens=2500
        )
        
        reply = response.choices[0].message.content
        chat_threads[chat_id].append({"role": "assistant", "content": reply})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç—Ä–µ–¥–∞
        if len(chat_threads[chat_id]) > 20:
            chat_threads[chat_id] = chat_threads[chat_id][:1] + chat_threads[chat_id][-10:]
            
        await update.message.reply_text(reply)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ChatGPT-–∑–∞–ø—Ä–æ—Å–µ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def photo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /photo –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ"""
    if not PHOTO_GENERATOR_API_AVAILABLE:
        await update.message.reply_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    prompt = update.message.text[7:].strip()  # —É–±–∏—Ä–∞–µ–º /photo
    
    if not prompt:
        await update.message.reply_text(
            "üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /photo\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/photo cute cat sitting on a chair</code>",
            parse_mode='HTML'
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–æ—Ç–æ...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import asyncio
        loop = asyncio.get_event_loop()
        photo_path = await loop.run_in_executor(None, generate_photo, prompt)
        
        if photo_path and os.path.exists(photo_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            with open(photo_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(photo_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {photo_path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {photo_path}: {e}")
                
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            await status_message.delete()
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        reset_message_counters()
        
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("debug", debug_command))
        application.add_handler(CommandHandler("sum", manual_summary))
        application.add_handler(CommandHandler("top", top_command))
        application.add_handler(CommandHandler("week", week_command))
        application.add_handler(CommandHandler("date", date_command))
        application.add_handler(CommandHandler("topdate", topdate_command))
        application.add_handler(CommandHandler("q", chatgpt_query))
        application.add_handler(CommandHandler("photo", photo_command))
        application.add_handler(InlineQueryHandler(inline_query))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã —Å "?")
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
        application.add_handler(MessageHandler(filters.VOICE, message_handler))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π job_queue
        job_queue = application.job_queue
        daily_time = time(hour=23, minute=59, tzinfo=moscow_tz)
        job_queue.run_daily(send_daily_reports, daily_time, name='daily_reports')
        
        logger.info("–ë–æ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            application.run_polling()
        finally:
            save_messages_to_file(force=True)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()
